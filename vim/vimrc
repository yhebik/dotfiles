" Defaults: {{{
" Set Options: 
augroup MyGroup
    autocmd!
augroup END
language message C
set helplang=en,ja spelllang=en_us,cjk
set ambiwidth=double encoding=utf-8 fileencoding=utf-8
set showmode showcmd cmdheight=2 laststatus=2
set autoindent smartindent expandtab smarttab
set tabstop=8 shiftwidth=4 softtabstop=4 shiftround
set foldenable foldmethod=marker foldcolumn=0 commentstring=%s foldlevel=999
let &showbreak = '> '
set nohlsearch ignorecase smartcase incsearch wrapscan
set display=lastline textwidth=0 splitbelow splitright
set backspace=indent,eol,start
set showmatch matchpairs& matchpairs+=<:>
set hidden autoread noswapfile nobackup nowritebackup autochdir
set timeout timeoutlen=5000 ttimeoutlen=50
set history=250 clipboard& clipboard+=unnamed
set completeopt=menuone pumheight=6 infercase
set shortmess=aTI       " no greeting messages
set showtabline=2

" Status Line:
let &statusline = "[%{winnr()}]%f%m%r%h%w\ %="
let &statusline .= "[%l/%L]\ [%{&ff}]\ [%Y]\ [%{&fenc!=''?&fenc:&enc}]"

" Key Mappings:
noremap : ;
noremap ; :
nnoremap Y y$
nnoremap <Space>. :<C-u>lcd %:p:h<CR>
nnoremap , :<C-u>update<CR>:shell<CR>
nnoremap <expr> g, ":\<C-u>update\<CR>:lcd ".system('git rev-parse --show-toplevel').":shell\<CR>"
nmap <Space> <C-w>
nnoremap <C-w>N :tabnew<CR>
nnoremap <C-w>C :tabclose<CR>
nnoremap <C-w>O :tabonly<CR>
nnoremap - gt
nnoremap _ gT
inoremap <expr> <Tab> col('.')!=1 && getline('.')[col('.')-2]!=' ' ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> col('.')!=1 && getline('.')[col('.')-2]!=' ' ? "\<C-p>" : "\<S-Tab>"
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Appearance:
set background=dark
if $TERM == "mlterm" || $TERM == "xterm-256color"
    set t_Co=256
endif
syntax enable
"}}}
" Plugins:"{{{
" pathogen
call pathogen#infect()
filetype plugin indent on

" caw
function! OpCawCommentout(motion_wise)
    execute "normal" "`[V`]\<Plug>(caw:i:toggle)"
endfunction
call operator#user#define('caw', 'OpCawCommentout')
map #  <Plug>(operator-caw)

" foldCC
set foldtext=FoldCCtext()

" jellybeans 
if &t_Co==256
    colorscheme jellybeans
    highlight CursorLine ctermbg=darkgray guibg=#343434
    highlight Normal ctermbg=None
endif

" neosnippet 
let g:neosnippet#snippets_directory = '~/.vim/after/snippet'
imap <expr> @ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "@"
smap <expr> @ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "@"

" operator-replace 
map X <Plug>(operator-replace)

" eskk 
cmap <C-j> <Plug>(eskk:toggle)
imap <C-j> <Plug>(eskk:toggle)
let g:eskk#dictionary = {'path': "~/.eskk/skk-jisyo", 'sorted': 0, 'encoding': 'utf-8',}
let g:eskk#large_dictionary = {'path': "~/.eskk/SKK-JISYO.L.utf8", 'sorted': 1, 'encoding': 'utf-8',}
let g:eskk#keep_state = 1

" vim-surround
nmap s <Plug>Ysurround

" vim-mctabline
set tabline=%!MakeTabLine()

" unite 
nnoremap [unite] <Nop>
nmap x [unite]
let g:unite_enable_start_insert = 1
let s:ils = [ '\.png', '\.eps', '\.xcf', '\.pyc', '\.pickle', '\.vtk', '\.git', '\.aux', '\.pdf', '\.dvi', '\.toc', '\.gz', '\.bz2', '\.a', '\.o', '\.so', '\.mp4', '\.zip', '__pycache__', '\.eskk', '\.cache', '\.uim', '\.config', '\.gimp', '\.gnome', '\.ssh', '\.local', ]
let s:pls = []
for pat in s:ils
    call add(s:pls, pat)
endfor
let s:ipattern = join(s:pls, '\|')
call unite#custom#source('file,file_rec,file_rec/async,file_rec/git', 'ignore_pattern', s:ipattern)
call unite#custom#profile('default', 'context', { 'prompt_direction': 'top'})
nnoremap <silent> [unite]x   :<C-u>Unite -silent -no-split -no-resize -buffer-name=files file_mru<CR>
nnoremap <silent> [unite]p   :<C-u>Unite -silent -no-split -no-resize -buffer-name=files file_rec:!<CR>
nnoremap <silent> [unite]h   :<C-u>UniteWithBufferDir -silent -no-split -no-resize -buffer-name=files file file/new<CR>
nnoremap <expr>   [unite]H ":\<C-u>Unite -silent -no-split -no-resize -buffer-name=files file:". $HOME . "\<CR>"
nnoremap <silent> [unite]b   :<C-u>Unite -silent -no-split -no-resize -buffer-name=files buffer:-<CR>
nnoremap          [unite]g  :\<C-u>Unite -silent -no-split -no-resize -buffer-name=files grep:.::
"}}}
" AutoCmds:"{{{
autocmd MyGroup FileType * setlocal formatoptions-=ro "avoid auto comment mark insertinon
"}}}
